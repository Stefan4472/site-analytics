from flaskr.processing.query_runner import QueryRunner, Query, QueryOn, CountWhat, QueryResolution, GroupWhat
"""
Test query strings generated by the QueryRunner().

It doesn't make sense to write a test for every possible combination
of parameters, so I created two separate test spreads that cover
the main query types.
"""


def test_count_users_all_time():
    query = Query(QueryOn.People, CountWhat.Users, GroupWhat.Nothing, QueryResolution.AllTime)
    expected_sql = \
        'SELECT COUNT(DISTINCT users.id) AS cnt '\
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot ' \
        'ORDER BY cnt'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_count_users_by_day():
    query = Query(QueryOn.People, CountWhat.Users, GroupWhat.Nothing, QueryResolution.Day)
    expected_sql = \
        'SELECT COUNT(DISTINCT users.id) AS cnt, ' \
        'EXTRACT(YEAR FROM views.timestamp) AS year, ' \
        'EXTRACT(DOY FROM views.timestamp) AS day '\
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot '\
        'GROUP BY year, day ORDER BY year, day, cnt'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_count_users_by_week():
    query = Query(QueryOn.People, CountWhat.Users, GroupWhat.Nothing, QueryResolution.Week)
    expected_sql = \
        'SELECT COUNT(DISTINCT users.id) AS cnt, ' \
        'EXTRACT(YEAR FROM views.timestamp) AS year, ' \
        'EXTRACT(WEEK FROM views.timestamp) AS week '\
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot ' \
        'GROUP BY year, week ORDER BY year, week, cnt'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_count_users_by_month():
    query = Query(QueryOn.People, CountWhat.Users, GroupWhat.Nothing, QueryResolution.Month)
    expected_sql = \
        'SELECT COUNT(DISTINCT users.id) AS cnt, ' \
        'EXTRACT(YEAR FROM views.timestamp) AS year, ' \
        'EXTRACT(MONTH FROM views.timestamp) AS month '\
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot ' \
        'GROUP BY year, month ORDER BY year, month, cnt'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_count_users_by_year():
    query = Query(QueryOn.People, CountWhat.Users, GroupWhat.Nothing, QueryResolution.Year)
    expected_sql = \
        'SELECT COUNT(DISTINCT users.id) AS cnt, ' \
        'EXTRACT(YEAR FROM views.timestamp) AS year ' \
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot '\
        'GROUP BY year ORDER BY year, cnt'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_country_views_all_time():
    query = Query(QueryOn.Bots, CountWhat.Views, GroupWhat.Country, QueryResolution.AllTime)
    expected_sql = \
        'SELECT COUNT(*) AS cnt, users.country '\
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot ' \
        'GROUP BY users.country ' \
        'ORDER BY users.country'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_country_views_by_day():
    query = Query(QueryOn.Bots, CountWhat.Views, GroupWhat.Country, QueryResolution.Day)
    expected_sql = \
        'SELECT COUNT(*) AS cnt, users.country, ' \
        'EXTRACT(YEAR FROM views.timestamp) AS year, ' \
        'EXTRACT(DOY FROM views.timestamp) AS day '\
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot '\
        'GROUP BY year, day, users.country ORDER BY year, day, users.country'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_country_views_by_week():
    query = Query(QueryOn.Bots, CountWhat.Views, GroupWhat.Country, QueryResolution.Week)
    expected_sql = \
        'SELECT COUNT(*) AS cnt, users.country, ' \
        'EXTRACT(YEAR FROM views.timestamp) AS year, ' \
        'EXTRACT(WEEK FROM views.timestamp) AS week '\
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot ' \
        'GROUP BY year, week, users.country ORDER BY year, week, users.country'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_country_views_by_month():
    query = Query(QueryOn.Bots, CountWhat.Views, GroupWhat.Country, QueryResolution.Month)
    expected_sql = \
        'SELECT COUNT(*) AS cnt, users.country, ' \
        'EXTRACT(YEAR FROM views.timestamp) AS year, ' \
        'EXTRACT(MONTH FROM views.timestamp) AS month '\
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot ' \
        'GROUP BY year, month, users.country ORDER BY year, month, users.country'
    assert expected_sql == QueryRunner._generate_sql(query)


def test_country_views_by_year():
    query = Query(QueryOn.Bots, CountWhat.Views, GroupWhat.Country, QueryResolution.Year)
    expected_sql = \
        'SELECT COUNT(*) AS cnt, users.country, ' \
        'EXTRACT(YEAR FROM views.timestamp) AS year ' \
        'FROM users JOIN views ON views.user_id = users.id '\
        'WHERE views.timestamp > :start AND views.timestamp < :end '\
        'AND users.is_bot = :is_bot '\
        'GROUP BY year, users.country ORDER BY year, users.country'
    assert expected_sql == QueryRunner._generate_sql(query)
