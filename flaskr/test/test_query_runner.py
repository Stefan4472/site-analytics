from flaskr.processing.queries import QueryRunner, QueryOn, QueryResolution, QueryWhat
"""
Test query strings generated by the QueryRunner().

It doesn't make sense to write a test for every possible combination
of parameters, so I created two separate test spreads that cover
the main query types.
"""

def test_count_users_all_time():
    builder = QueryRunner(QueryOn.Users, QueryWhat.Nothing, QueryResolution.AllTime)
    expected_query = \
        'SELECT COUNT(DISTINCT _user.id) AS cnt '\
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot, cnt'
    assert expected_query == builder._make_query()


def test_count_users_by_day():
    builder = QueryRunner(QueryOn.Users, QueryWhat.Nothing, QueryResolution.Day)
    expected_query = \
        'SELECT COUNT(DISTINCT _user.id) AS cnt, ' \
        'EXTRACT(YEAR FROM view.timestamp) AS year, ' \
        'EXTRACT(DOY FROM view.timestamp) AS day '\
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot '\
        'GROUP BY year, day ORDER BY year, day, cnt'
    assert expected_query == builder._make_query()


def test_count_users_by_week():
    builder = QueryRunner(QueryOn.Users, QueryWhat.Nothing, QueryResolution.Week)
    expected_query = \
        'SELECT COUNT(DISTINCT _user.id) AS cnt, ' \
        'EXTRACT(YEAR FROM view.timestamp) AS year, ' \
        'EXTRACT(WEEK FROM view.timestamp) AS week '\
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot ' \
        'GROUP BY year, week ORDER BY year, week, cnt'
    assert expected_query == builder._make_query()


def test_count_users_by_month():
    builder = QueryRunner(QueryOn.Users, QueryWhat.Nothing, QueryResolution.Month)
    expected_query = \
        'SELECT COUNT(DISTINCT _user.id) AS cnt, ' \
        'EXTRACT(YEAR FROM view.timestamp) AS year, ' \
        'EXTRACT(MONTH FROM view.timestamp) AS month '\
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot ' \
        'GROUP BY year, month ORDER BY year, month, cnt'
    assert expected_query == builder._make_query()


def test_count_users_by_year():
    builder = QueryRunner(QueryOn.Users, QueryWhat.Nothing, QueryResolution.Year)
    expected_query = \
        'SELECT COUNT(DISTINCT _user.id) AS cnt, ' \
        'EXTRACT(YEAR FROM view.timestamp) AS year ' \
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot '\
        'GROUP BY year ORDER BY year, cnt'
    assert expected_query == builder._make_query()


def test_country_views_all_time():
    builder = QueryRunner(QueryOn.Views, QueryWhat.Country, QueryResolution.AllTime)
    expected_query = \
        'SELECT COUNT(*) AS cnt, _user.country '\
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot ' \
        'GROUP BY _user.country'
    assert expected_query == builder._make_query()


def test_country_views_by_day():
    builder = QueryRunner(QueryOn.Views, QueryWhat.Country, QueryResolution.Day)
    expected_query = \
        'SELECT COUNT(*) AS cnt, _user.country, ' \
        'EXTRACT(YEAR FROM view.timestamp) AS year, ' \
        'EXTRACT(DOY FROM view.timestamp) AS day '\
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot '\
        'GROUP BY year, day, _user.country ORDER BY year, day, _user.country'
    assert expected_query == builder._make_query()


def test_country_views_by_week():
    builder = QueryRunner(QueryOn.Views, QueryWhat.Country, QueryResolution.Week)
    expected_query = \
        'SELECT COUNT(*) AS cnt, _user.country, ' \
        'EXTRACT(YEAR FROM view.timestamp) AS year, ' \
        'EXTRACT(WEEK FROM view.timestamp) AS week '\
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot ' \
        'GROUP BY year, week, _user.country ORDER BY year, week, _user.country'
    assert expected_query == builder._make_query()


def test_country_views_by_month():
    builder = QueryRunner(QueryOn.Views, QueryWhat.Country, QueryResolution.Month)
    expected_query = \
        'SELECT COUNT(*) AS cnt, _user.country, ' \
        'EXTRACT(YEAR FROM view.timestamp) AS year, ' \
        'EXTRACT(MONTH FROM view.timestamp) AS month '\
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot ' \
        'GROUP BY year, month, _user.country ORDER BY year, month, _user.country'
    assert expected_query == builder._make_query()


def test_country_views_by_year():
    builder = QueryRunner(QueryOn.Views, QueryWhat.Country, QueryResolution.Year)
    expected_query = \
        'SELECT COUNT(*) AS cnt, _user.country, ' \
        'EXTRACT(YEAR FROM view.timestamp) AS year ' \
        'FROM _user JOIN view ON view.user_id = _user.id '\
        'WHERE view.timestamp > :start AND view.timestamp < :end '\
        'AND _user.is_bot = :is_bot '\
        'GROUP BY year, _user.country ORDER BY year, _user.country'
    assert expected_query == builder._make_query()
